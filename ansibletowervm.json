{
    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
      "vmAnsibleTowerUsername": {
        "type": "string",
        "metadata": {
          "description": "Username for virtual machine that will have ansible tower installed"
        }
      },
      "sshKeyData": {
        "type": "string",
        "metadata": {
          "description": "Enter ssh rsa public key file string data."
        }
      },
      "vmSize": {
        "type": "string",
        "defaultValue": "Standard_DS2_v2",
        "metadata": {
          "description": "OpenShift Master VM size"
        }
      },
      "vmTowerName": {
        "type": "string",
        "metadata": {
          "description": "Name of Ansible Tower VM"
        }
      },
      "ansibleTowerAdminPassword": {
        "type": "securestring",
        "minLength": 5,
        "metadata": {
          "description": "Password for ansible tower console admin(min length:5)"
        }
      },
      "ansibleTowerDatabasePassword": {
        "type": "securestring",
        "minLength": 5,
        "metadata": {
          "description": "Password for ansible tower database(min length:5)"
        }
      },
      "remoteAllowedCIDR": {
        "type": "string",
        "minLength": 7,
        "defaultValue": "0.0.0.0/0",
        "metadata": {
          "description": "Enter Public IP CIDR to allow for accessing the deployment.Enter in 0.0.0.0/0 format. You can always modify these later in NSG Settings"
        }
      },
      "location": {
        "type": "string",
        "metadata": {
          "description": "Location"
        }
      },
      "baseUrl": {
        "type": "string",
        "metadata": {
          "description": "Base URL for Marketplace Deployment",
          "artifactsBaseUrl": ""
        },
        "defaultValue": "https://sourcestorage11.blob.core.windows.net/scripts"
      }
    },
    "variables": {
      "apiVersionCompute": "2017-03-30",
      "apiVersionNetwork": "2017-09-01",
      "apiVersionStorage": "2017-06-01",
      "towerAvSet": "tower-avset",
      "ansibleNsgName": "tower-nsg",
      "towerStorageAccountName": "[concat('towstorage',uniqueString(resourceGroup().id))]",
      "StorageAccountType": "Premium_LRS",
      "StorageAccountTier": "Premium",
      "diagStorageAccountName": "[concat('dgstorage',uniqueString(resourceGroup().id))]",
      "ansibleVnetName": "ansible-vnet",
      "ansibleVnetPrefix": "10.0.0.0/16",
      "ansibleVnetTowerSubnetName": "tower-subnet",
      "ansibleVnetTowerSubnetPrefix": "10.0.0.0/24",
      "towerSubnetRef": "[resourceId('Microsoft.Network/virtualNetworks/subnets/',variables('ansibleVnetName'), variables('ansibleVnetTowerSubnetName'))]",
      "pipTowerName": "public-ip-tower",
      "pipTowerDnsName": "[concat('tower',uniqueString(resourceGroup().id))]",
      "vmTowerName": "vm-ansible-tower",
      "vmAnsibleTowerNicName": "[concat(parameters('vmTowerName'),'-nic')]",
      "storageAccountContainerName": "vhds",
      "sshKeyPath": "[concat('/home/',parameters('vmAnsibleTowerUsername'),'/.ssh/authorized_keys')]",
      "scriptFileName": "installansibletowerscript.sh",
      "scriptStart": "su -c'sh ",
      "customScriptCommand": "[concat(variables('scriptStart'), variables('scriptFileName'), ' ')]",
      "scriptClose": "'",
      "redHatTags": {
        "app": "AnsibleTower",
        "provider": "9d2c71fc-96ba-4b4a-93b3-14def5bc96fc"
      }
    },
    "resources": [
      {
        "type": "Microsoft.Compute/availabilitySets",
        "name": "[variables('towerAvSet')]",
        "apiVersion": "[variables('apiVersionCompute')]",
        "location": "[parameters('location')]",
        "comments": "This availability set will consist of ansible tower installed virtual machine",
        "tags": {
          "displayName": "Availabilty Set-Tower",
          "app": "[variables('redHatTags').app]",
          "provider": "[variables('redHatTags').provider]"
        },
        "properties": {}
      },
      {
        "type": "Microsoft.Network/networkSecurityGroups",
        "name": "[variables('ansibleNsgName')]",
        "apiVersion": "[variables('apiVersionNetwork')]",
        "location": "[parameters('location')]",
        "comments": "This will have firewall rules for Ansible Tower Virtual machine",
        "tags": {
          "displayName": "Tower-NSG",
          "app": "[variables('redHatTags').app]",
          "provider": "[variables('redHatTags').provider]"
        },
        "properties": {
          "securityRules": [
            {
              "name": "allow-80",
              "properties": {
                "access": "Allow",
                "destinationAddressPrefix": "*",
                "destinationPortRange": "80",
                "direction": "Inbound",
                "priority": 201,
                "protocol": "Tcp",
                "sourceAddressPrefix": "[parameters('remoteAllowedCIDR')]",
                "sourcePortRange": "*"
              }
            },
            {
              "name": "allow-8080",
              "properties": {
                "access": "Allow",
                "destinationAddressPrefix": "*",
                "destinationPortRange": "8080",
                "direction": "Inbound",
                "priority": 202,
                "protocol": "Tcp",
                "sourceAddressPrefix": "[parameters('remoteAllowedCIDR')]",
                "sourcePortRange": "*"
              }
            },
            {
              "name": "allow-443",
              "properties": {
                "access": "Allow",
                "destinationAddressPrefix": "*",
                "destinationPortRange": "443",
                "direction": "Inbound",
                "priority": 203,
                "protocol": "Tcp",
                "sourceAddressPrefix": "[parameters('remoteAllowedCIDR')]",
                "sourcePortRange": "*"
              }
            },
            {
              "name": "default-allow-ssh",
              "properties": {
                "access": "Allow",
                "destinationAddressPrefix": "*",
                "destinationPortRange": "22",
                "direction": "Inbound",
                "priority": 200,
                "protocol": "Tcp",
                "sourceAddressPrefix": "[parameters('remoteAllowedCIDR')]",
                "sourcePortRange": "*"
              }
            }
          ]
        }
      },
      {
        "type": "Microsoft.Storage/storageAccounts",
        "name": "[variables('towerStorageAccountName')]",
        "apiVersion": "[variables('apiVersionStorage')]",
        "location": "[parameters('location')]",
        "comments": "This storage account is used to store the VM disks of ansible tower vm",
        "kind": "Storage",
        "tags": {
          "displayName": "Tower Storage Account",
          "app": "[variables('redHatTags').app]",
          "provider": "[variables('redHatTags').provider]"
        },
        "properties": {},
        "sku": {
          "name": "[variables('StorageAccountType')]",
          "tier": "[variables('StorageAccountTier')]"
        }
      },
      {
        "type": "Microsoft.Storage/storageAccounts",
        "name": "[variables('diagStorageAccountName')]",
        "apiVersion": "[variables('apiVersionStorage')]",
        "location": "[parameters('location')]",
        "comments": "This storage account is used for diagnostic data for all vms",
        "kind": "Storage",
        "tags": {
          "displayName": "Diagnostics Storage Account",
          "app": "[variables('redHatTags').app]",
          "provider": "[variables('redHatTags').provider]"
        },
        "properties": {},
        "sku": {
          "name": "Standard_LRS",
          "tier": "Standard"
        }
      },
      {
        "type": "Microsoft.Network/virtualNetworks",
        "name": "[variables('ansibleVnetName')]",
        "apiVersion": "[variables('apiVersionNetwork')]",
        "location": "[parameters('location')]",
        "comments": "This Virtual Network contains all the VMs needed",
        "tags": {
          "displayName": "Ansible-Virtual Network",
          "app": "[variables('redHatTags').app]",
          "provider": "[variables('redHatTags').provider]"
        },
        "dependsOn": [
          "[resourceId('Microsoft.Network/networkSecurityGroups', variables('ansibleNsgName'))]"
        ],
        "properties": {
          "addressSpace": {
            "addressPrefixes": [
              "[variables('ansibleVnetPrefix')]"
            ]
          },
          "subnets": [
            {
              "name": "[variables('ansibleVnetTowerSubnetName')]",
              "properties": {
                "addressPrefix": "[variables('ansibleVnetTowerSubnetPrefix')]",
                "networkSecurityGroup": {
                  "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('ansibleNsgName'))]"
                }
              }
            }
          ]
        }
      },
      {
        "type": "Microsoft.Network/publicIPAddresses",
        "name": "[variables('pipTowerName')]",
        "apiVersion": "[variables('apiVersionNetwork')]",
        "location": "[parameters('location')]",
        "comments": "This Public IP is used by the Ansible Tower installed VM",
        "tags": {
          "displayName": "Public IP Address -Tower VM",
          "app": "[variables('redHatTags').app]",
          "provider": "[variables('redHatTags').provider]"
        },
        "properties": {
          "publicIPAllocationMethod": "Static",
          "dnsSettings": {
            "domainNameLabel": "[variables('pipTowerDnsName')]"
          }
        }
      },
      {
        "type": "Microsoft.Network/networkInterfaces",
        "name": "[variables('vmAnsibleTowerNicName')]",
        "apiVersion": "[variables('apiVersionNetwork')]",
        "location": "[parameters('location')]",
        "comments": "These NIC will be used by Ansible Tower VM",
        "tags": {
          "displayName": "NIC Tower VM",
          "app": "[variables('redHatTags').app]",
          "provider": "[variables('redHatTags').provider]"
        },
        "dependsOn": [
          "[resourceId('Microsoft.Network/virtualNetworks', variables('ansibleVnetName'))]",
          "[resourceId('Microsoft.Network/publicIPAddresses', variables('pipTowerName'))]"
        ],
        "properties": {
          "ipConfigurations": [
            {
              "name": "ipconfig1",
              "properties": {
                "privateIPAllocationMethod": "Dynamic",
                "subnet": {
                  "id": "[variables('towerSubnetRef')]"
                },
                "publicIPAddress": {
                  "id": "[resourceId('Microsoft.Network/publicIPAddresses', variables('pipTowerName'))]"
                }
              }
            }
          ]
        }
      },
      {
        "type": "Microsoft.Compute/virtualMachines",
        "name": "[parameters('vmTowerName')]",
        "apiVersion": "[variables('apiVersionCompute')]",
        "location": "[parameters('location')]",
        "comments": "This VM will be used as Ansible Tower VM",
        "tags": {
          "displayName": "VM-AnsibleTower",
          "app": "[variables('redHatTags').app]",
          "provider": "[variables('redHatTags').provider]"
        },
        "dependsOn": [
          "[resourceId('Microsoft.Storage/storageAccounts', variables('towerStorageAccountName'))]",
          "[resourceId('Microsoft.Network/networkInterfaces', variables('vmAnsibleTowerNicName'))]",
          "[resourceId('Microsoft.Compute/availabilitySets', variables('towerAvSet'))]"
        ],
        "properties": {
          "availabilitySet": {
            "id": "[resourceId('Microsoft.Compute/availabilitySets', variables('towerAvSet'))]"
          },
          "hardwareProfile": {
            "vmSize": "[parameters('VmSize')]"
          },
          "networkProfile": {
            "networkInterfaces": [
              {
                "id": "[resourceId('Microsoft.Network/networkInterfaces', variables('vmAnsibleTowerNicName'))]"
              }
            ]
          },
          "osProfile": {
            "computerName": "[parameters('vmTowerName')]",
            "adminUsername": "[parameters('vmAnsibleTowerUsername')]",
            "linuxConfiguration": {
              "disablePasswordAuthentication": true,
              "ssh": {
                "publicKeys": [
                  {
                    "path": "[variables('sshKeyPath')]",
                    "keyData": "[parameters('sshKeyData')]"
                  }
                ]
              }
            }
          },
          "storageProfile": {
            "imageReference": {
              "publisher": "RedHat",
              "offer": "RHEL",
              "sku": "7-RAW",
              "version": "latest"
            },
            "osDisk": {
              "name": "vm-ansible-tower-osdisk",
              "vhd": {
                "uri": "[concat(reference(concat('Microsoft.Storage/storageAccounts/', variables('towerStorageAccountName')), variables('apiVersionStorage')).primaryEndpoints.blob, variables('storageAccountContainerName'),'/','vm-ansible-tower-osdisk','.vhd')]"
              },
              "caching": "ReadWrite",
              "createOption": "FromImage"
            }
          },
          "diagnosticsProfile": {
            "bootDiagnostics": {
              "enabled": "true",
              "storageUri": "[reference(concat('Microsoft.Storage/storageAccounts/', variables('diagStorageAccountName')), variables('apiVersionStorage')).primaryEndpoints.blob]"
            }
          }
        },
        "resources": [
          {
            "type": "extensions",
            "name": "ansible-tower-extension",
            "apiVersion": "[variables('apiVersionCompute')]",
            "location": "[parameters('location')]",
            "comments": "These VM Extensions are used to setup ansible tower on the VM",
            "tags": {
              "displayName": "CustomInstallTower",
              "app": "[variables('redHatTags').app]",
              "provider": "[variables('redHatTags').provider]"
            },
            "dependsOn": [
              "[resourceId('Microsoft.Compute/virtualMachines', parameters('vmTowerName'))]"
            ],
            "properties": {
              "publisher": "Microsoft.Azure.Extensions",
              "type": "CustomScript",
              "typeHandlerVersion": "2.0",
              "autoUpgradeMinorVersion": true,
              "settings": {
                "fileUris": [
                  "[concat(parameters('baseUrl'), variables('scriptFileName'))]"
                ]
              },
              "protectedSettings": {
                "commandToExecute": "[concat(variables('customScriptCommand'), parameters('ansibleTowerAdminPassword'),' ',parameters('ansibleTowerDatabasePassword'), variables('scriptClose'))]"
              }
            }
          }
        ]
      }
    ],
    "outputs": {
      "ansibleTowerFqdn": {
        "value": "[reference(resourceId('Microsoft.Network/publicIPAddresses',variables('pipTowerName'))).dnsSettings.fqdn]",
        "type": "string"
      }
    }
  }